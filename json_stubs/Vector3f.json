{"name":"Vector3f","methods":{"__eq":{"usage":["boolean :__eq(Vector3f vec)"]},"_newVec3f":{"usage":["Vector3f :_newVec3f(Vector3f vec)"]},"__add":{"usage":["Vector3f :__add(Vector3f vec)"]},"__sub":{"usage":["Vector3f :__sub(Vector3f vec)"]},"__div":{"usage":["Vector3f :__div(float64 num)"]},"__pow":{"usage":["Vector3f :__pow(Vector3f vec)"]},"__unm":{"usage":["Vector3f :__unm()"]},"LengthSquared":{"usage":["float64 :LengthSquared()"]},"IsNaN":{"usage":["boolean :IsNaN()"]},"IsNormalized":{"usage":["boolean :IsNormalized()"]},"IsZero":{"usage":["boolean :IsZero(float64 num)"]},"Equals":{"usage":["boolean :Equals(Vector3f vec)"]},"_mulMat4":{"usage":["Vector3f :_mulMat4(Matrix4 mat)"]},"Project":{"usage":[" :Project(Vector3f vec)"]},"_mulNum":{"usage":["Vector3f :_mulNum(float64 num)"]},"Normalize":{"usage":[" :Normalize()"]},"_newNums":{"usage":["Vector3f :_newNums(float64 x, float64 y, float64 z)"]},"header_text":"Discovered Methods","Length":{"usage":["float64 :Length()"]},"info_text":"Discovered methods might be available in many contexts, but most typically in Fuse scripts"},"properties":{"TypeNamePtr":{"return_type":"string","access_class":"Read Only"},"info_text":"Discovered properties might be available in many contexts, but most typically in Fuse scripts","TypeName":{"return_type":"string","access_class":"Read Only"},"header_text":"Discovered Properties"}}