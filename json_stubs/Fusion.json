{"methods":{"SetBatch":[],"ClearFileLog":[],"ShowWindow":{"short_help":"Show or Hide main window","usage":[" :ShowWindow(number mode)"],"description":"Arguments:\n  mode: Can be a combination of the below:\n    SW_SHOW       - activates and displays the window\n    SW_HIDE       - hides the window completely\n    SW_MAXIMIZE   - maximize the window\n    SW_MINIMIZE   - minimize the window\n    SW_RESTORE    - restores the window to normal size/position"},"DumpGLObjects":{"usage":["boolean :DumpGLObjects(string filename)"],"short_help":"Dumps OpenGL Objects"},"Print":[],"Execute":[],"GetGlobalPathMap":{"short_help":"Returns a table of all global path maps","usage":["table :GetGlobalPathMap([boolean built_ins], [boolean defaults])"],"description":"Args:  built_ins - include built-in path maps (default: true)\n       defaults  - include factory default path maps (default: true)\nReturns: Table of path strings, keyed by map name."},"CreateMail":{"see_also":"[MailMessage()](#MailMessage)","short_help":"Create an empty Mail message object","usage":["MailMessage :CreateMail()"]},"GetArgs":{"usage":["table :GetArgs()"],"short_help":"Get command line arguments"},"Copy":[],"GetEnv":{"usage":["string :GetEnv(string name)"],"short_help":"Retrieve the value of an environment variable"},"SavePrefs":{"see_also":"[SetPrefs()](#SetPrefs), [LoadPrefs()](#LoadPrefs)","short_help":"Saves all current global preferences","usage":[" :SavePrefs([string filename])"],"description":"filename: pathname to write the prefs file to"},"LoadPrefs":{"see_also":"[SetPrefs()](#SetPrefs), [SavePrefs()](#SavePrefs)","short_help":"Reloads all current global preferences","usage":["boolean :LoadPrefs([string filename], [string mastername])"],"description":"filename:    pathname to read the prefs file from\nmasterprefs: pathname of overriding prefs file"},"FindReg":{"see_also":"[GetRegAttrs()](#GetRegAttrs)","short_help":"Find a registry object by ID","usage":["Registry :FindReg(string id, [number type])"]},"GetRegAttrs":{"see_also":"[FindReg()](#FindReg)","short_help":"Retrieve information about a registry ID","usage":["table :GetRegAttrs(string id, [number type])"]},"GetCompList":{"usage":["table :GetCompList()"],"short_help":"Retrieves a table of all compositions currently present"},"ShowAbout":{"usage":[" :ShowAbout()"],"short_help":"Display the About dialog"},"QueueComp":{"see_also":"[Render()](Composition.md#Render)","short_help":"Queue a composition to be rendered locally","usage":["RenderJob :QueueComp(string filename, [number start], [number end], [string group])","RenderJob :QueueComp(table args)"],"description":"Arguments:\n   Filename - string containing the path to the composition or script to be queued\n   Start    - (optional) first frame to render\n   End      - (optional) last frame to render\n   Group    - (optional) string containing the Slave group to render with\n\nReturns: The new RenderJob object, if successful, else nil"},"LoadRecentComp":{"see_also":"[NewComp()](#NewComp), [LoadComp()](#LoadComp), [Close()](Composition.md#Close)","short_help":"Loads an composition from the recent file list","usage":["Composition :LoadRecentComp(integer index, [boolean quiet], [boolean autoclose], [boolean hidden])"]},"LoadComp":{"see_also":"[NewComp()](#NewComp), [Close()](Composition.md#Close)","short_help":"Loads an existing composition","usage":["Composition :LoadComp(string filename, [boolean quiet], [boolean autoclose], [boolean hidden])","Composition :LoadComp(string filename, table options)","Composition :LoadComp(MemBlock savedcomp, table options)"]},"NewComp":{"see_also":"[LoadComp()](#LoadComp), [Close()](Composition.md#Close)","short_help":"Creates a new composition","usage":["Composition :NewComp([boolean quiet], [boolean autoclose], [boolean hidden])"]},"_NewComp":{"see_also":"[LoadComp()](#LoadComp), [Close()](Composition.md#Close)","short_help":"Creates a new composition","usage":["Composition :_NewComp([boolean quiet], [boolean autoclose], [boolean hidden])"]},"GetVersion":[],"OpenFile":{"see_also":"[File()](#File)","short_help":"Open a file","usage":["File :OpenFile(string filename, number mode)"],"description":"Arguments:\n\n  filename: specifies the full path and name of the file to open\n\n  mode: Specifies the mode(s) of file access required, from a combination of the following constants:\n    FILE_MODE_READ        - Read access\n    FILE_MODE_WRITE       - Write access\n    FILE_MODE_UNBUFFERED  - Unbuffered access\n    FILE_MODE_SHARED      - Shared access"},"_Memory_Purge":{"usage":[" :_Memory_Purge(number seconds)"]},"UpdateMenus":[],"ToggleUtility":{"usage":[" :ToggleUtility(string id)"],"short_help":"Shows or hides a Utility plugin"},"ToggleRenderManager":{"usage":[" :ToggleRenderManager()"],"short_help":"Shows or hides the Render Manager"},"ToggleBins":{"usage":[" :ToggleBins()"],"short_help":"Shows or hides the Bins window"},"Test":[],"Quit":{"short_help":"Quit Fusion","usage":[" :Quit(number exitcode)"],"description":"The Quit() function will cause Fusion to exit, without saving changes.\nIf no exitcode is specified, the Fusion process will return 0."},"Sleep":{"usage":[" :Sleep(number seconds)"]},"Delete":[],"ShowPrefs":{"usage":[" :ShowPrefs([string pageid], [boolean showall], [Composition comp])"],"short_help":"Display the Preferences dialog"},"SetPrefs":{"see_also":"[GetPrefs()](#GetPrefs), [ShowPrefs()](#ShowPrefs)","short_help":"Set preferences from a table of attributes","usage":[" :SetPrefs(string prefname, value val)"," :SetPrefs(table prefs)"]},"GetCurrentComp":{"usage":["Composition :GetCurrentComp()"],"short_help":"Returns the currently active composition"},"SetOnlyActiveComp":[],"IsUtilityOpen":{"usage":[" :IsUtilityOpen(string id)"]},"SetFusionApp":{"usage":[" :SetFusionApp()"]},"SetData":{"see_also":"[GetData()](#GetData)","short_help":"Set custom persistent data","usage":[" :SetData(string name, (number|string|boolean|table) value)"]},"SetClipboard":{"see_also":"[GetClipboard()](#GetClipboard)","short_help":"Sets the clipboard to contain the tool(s) specifed by a table or as ASCII text.","usage":["boolean, table :SetClipboard()","boolean, string :SetClipboard()"]},"DeselectAll":[],"Paste":[],"ClearRecentCompList":[],"GetData":{"see_also":"[SetData()](#SetData)","short_help":"Get custom persistent data","usage":["(number|string|boolean|table) :GetData([string name])"]},"RunScript":{"usage":[" :RunScript(string filename)"],"short_help":"Run a script"},"ReverseMapPath":{"see_also":"[MapPath()](#MapPath), [MapPathSegments()](#MapPathSegments), [ReverseMapPath()](Composition.md#ReverseMapPath)","short_help":"Collapses a path into best-matching path map","usage":["string :ReverseMapPath(string mapped)"],"description":"Returns the path string relative to nearest applicable mapped path."},"RemoveConfig":[],"header_text":"Methods","GetClipboard":{"see_also":"[SetClipboard()](#SetClipboard)","short_help":"Retrieves the tool(s) on the clipboard, as tables and as ASCII text.","usage":["table, string :GetClipboard()"]},"GetMousePos":[],"GetAppInfo":[],"GetCPULoad":[],"GetRLMLicenseInfo":[],"GetRegSummary":{"usage":["table :GetRegSummary(number typemask, [boolean hidden])"],"short_help":"Retrieve a list of basic info for all registry objects known to the system"},"GetActiveFrameIndex":[],"InstallFile":[],"GetToolList":{"usage":[" :GetToolList()"]},"DeactivateLicense":{"usage":[" :DeactivateLicense()"],"short_help":"Deactivate Fusion Studio on this machine"},"GetFairlight":[],"GetResolve":[],"GetPrefs":{"see_also":"[SetPrefs()](#SetPrefs), [ShowPrefs()](#ShowPrefs)","short_help":"Retrieve a table of preferences","usage":["table :GetPrefs([string prefname], [boolean exclude-defaults])"]},"AddConfig":[],"GetToolIcon":{"usage":[" :GetToolIcon()"]},"MapPath":{"see_also":"[ReverseMapPath()](#ReverseMapPath), [MapPathSegments()](#MapPathSegments), [MapPath()](Composition.md#MapPath)","short_help":"Expands path mappings in a path string","usage":["string :MapPath(string path)"],"description":"Returns the path string with all mappings expanded. Only the first path of a multipath is returned."},"SetMasterApp":{"usage":[" :SetMasterApp()"]},"MapPathSegments":{"see_also":"[ReverseMapPath()](#ReverseMapPath), [MapPath()](#MapPath), [MapPathSegments()](Composition.md#MapPathSegments)","short_help":"Expands all path mappings in a multipath","usage":["table :MapPathSegments(string path)"],"description":"Returns a table of path strings with all mappings expanded. All paths of a multipath are returned."},"EditScript":{"usage":[" :EditScript()"],"short_help":"Edit Script"},"GetRecentFileName":[],"GetNumRecentFiles":[],"CustomizeToolbars":[],"ShowUI":[],"IsUIVisible":[],"SetActiveWndIndex":[],"SetActiveFrameIndex":[],"GetActiveWndIndex":[],"GetRegList":{"usage":["table :GetRegList(number typemask)"],"short_help":"Retrieve a list of all registry objects known to the system"},"GetRecentCompList":[],"OpenLibraryStudio":[],"OpenLibrary":[],"SelectAll":[],"GetPreviewList":{"usage":["table :GetPreviewList()"],"short_help":"Retrieves a table of global previews"},"PasteSettings":[],"Cut":[],"GetMainWindow":[],"NewFloatFrame":[],"NewTabbedFrame":[],"NewImageView":[],"IsNetworkAllowed":[],"AllowNetwork":[],"CreateFloatingView":[]},"attributes":{"REGB_Hide":{"type":"false","value":"boolean"},"REGB_SupportsDoD":{"type":"false","value":"boolean"},"REGS_Name":{"type":"Fusion","value":"string"},"REGI_Version":{"type":"0","value":"number (integer)"},"REGI_ClassType":{"type":"0 = CT_Any","value":"number (integer)"},"REGB_Unpredictable":{"type":"false","value":"boolean"},"REGS_VersionString":{"type":"Built: Jul 19 2023","value":"string"},"REGS_ID":{"type":"Fusion","value":"string"},"REGB_ControlView":{"type":"false","value":"boolean"},"REGI_Priority":{"type":"0","value":"number (integer)"}},"name":"Fusion","properties":{"FileLogging":{"access_class":"Read/Write"},"BinManager":{"return_type":"Bins","short_help":"Bins","access_class":"Read Only"},"HotkeyManager":{"return_type":"HotkeyManager","short_help":"The Global Hotkey Manager","access_class":"Read Only"},"QueueManager":{"return_type":"QueueManager","short_help":"The global render manager for this instance of Fusion","see_also":"[QueueManager](#QueueManager)","access_class":"Read Only"},"RenderManager":{"return_type":"QueueManager","short_help":"The global render manager for this instance of Fusion","see_also":"[QueueManager](#QueueManager)","access_class":"Read Only"},"CurrentFrame":{"access_class":"Read Only"},"Build":{"return_type":"number","short_help":"The build number of Fusion.\n","access_class":"Read Only"},"header_text":"Properties","CacheManager":{"return_type":"CacheManager","short_help":"The Global Cache Manager","access_class":"Read Only"},"Version":{"return_type":"number","short_help":"The version number of Fusion.\n","access_class":"Read Only"},"MouseX":{"access_class":"Read Only"},"UIManager":{"return_type":"UIManager","access_class":"Read Only"},"MouseY":{"access_class":"Read Only"},"ActionManager":{"return_type":"ActionManager","short_help":"The Global Action Manager","access_class":"Read Only"},"FontManager":{"return_type":"FontList","short_help":"The Global Font Manager","access_class":"Read Only"},"CurrentComp":{"return_type":"Composition","short_help":"Represents the currently active composition","description":"The CurrentComp variable represents the currently active composition within Fusion.","access_class":"Read Only"},"MenuManager":{"return_type":"MenuManager","short_help":"The Global Menu Manager","access_class":"Read Only"},"Bins":{"return_type":"Bins","short_help":"Bins","access_class":"Read Only"}},"class_inheritance":["Object"]}