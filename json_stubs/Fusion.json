{
    "name": "Fusion",
    "properties": {
        "QueueManager": {
            "short_help": "The global render manager for this instance of Fusion",
            "see_also": "[QueueManager](#QueueManager)",
            "return_type": "QueueManager",
            "access_class": "Read Only"
        },
        "BinManager": {
            "short_help": "Bins",
            "return_type": "Bins",
            "access_class": "Read Only"
        },
        "CacheManager": {
            "short_help": "The Global Cache Manager",
            "return_type": "CacheManager",
            "access_class": "Read Only"
        },
        "MouseX": {
            "access_class": "Read Only"
        },
        "RenderManager": {
            "short_help": "The global render manager for this instance of Fusion",
            "see_also": "[QueueManager](#QueueManager)",
            "return_type": "QueueManager",
            "access_class": "Read Only"
        },
        "MouseY": {
            "access_class": "Read Only"
        },
        "header_text": "Properties",
        "MenuManager": {
            "short_help": "The Global Menu Manager",
            "return_type": "MenuManager",
            "access_class": "Read Only"
        },
        "CurrentComp": {
            "short_help": "Represents the currently active composition",
            "description": "The CurrentComp variable represents the currently active composition within Fusion.",
            "return_type": "Composition",
            "access_class": "Read Only"
        },
        "FileLogging": {
            "access_class": "Read/Write"
        },
        "FontManager": {
            "short_help": "The Global Font Manager",
            "return_type": "FontList",
            "access_class": "Read Only"
        },
        "Build": {
            "short_help": "The build number of Fusion.\n",
            "return_type": "number",
            "access_class": "Read Only"
        },
        "ActionManager": {
            "short_help": "The Global Action Manager",
            "return_type": "ActionManager",
            "access_class": "Read Only"
        },
        "HotkeyManager": {
            "short_help": "The Global Hotkey Manager",
            "return_type": "HotkeyManager",
            "access_class": "Read Only"
        },
        "Version": {
            "short_help": "The version number of Fusion.\n",
            "return_type": "number",
            "access_class": "Read Only"
        },
        "CurrentFrame": {
            "access_class": "Read Only"
        },
        "UIManager": {
            "return_type": "UIManager",
            "access_class": "Read Only"
        },
        "Bins": {
            "short_help": "Bins",
            "return_type": "Bins",
            "access_class": "Read Only"
        }
    },
    "class_inheritance": [
        "Object"
    ],
    "methods": {
        "InstallFile": [],
        "GetRLMLicenseInfo": [],
        "GetCurrentComp": {
            "short_help": "Returns the currently active composition",
            "usage": [
                "Composition :GetCurrentComp()"
            ]
        },
        "GetFairlight": [],
        "GetResolve": [],
        "RemoveConfig": [],
        "AddConfig": [],
        "GetToolIcon": {
            "usage": [
                " :GetToolIcon()"
            ]
        },
        "SetFusionApp": {
            "usage": [
                " :SetFusionApp()"
            ]
        },
        "MapPathSegments": {
            "short_help": "Expands all path mappings in a multipath",
            "description": "Returns a table of path strings with all mappings expanded. All paths of a multipath are returned.",
            "see_also": "[ReverseMapPath()](#ReverseMapPath), [MapPath()](#MapPath), [MapPathSegments()](Composition.md#MapPathSegments)",
            "usage": [
                "table :MapPathSegments(string path)"
            ]
        },
        "_Memory_Purge": {
            "usage": [
                " :_Memory_Purge(number seconds)"
            ]
        },
        "EditScript": {
            "short_help": "Edit Script",
            "usage": [
                " :EditScript()"
            ]
        },
        "GetRecentFileName": [],
        "GetNumRecentFiles": [],
        "CustomizeToolbars": [],
        "ShowUI": [],
        "IsUIVisible": [],
        "SetActiveWndIndex": [],
        "SetActiveFrameIndex": [],
        "GetActiveWndIndex": [],
        "GetActiveFrameIndex": [],
        "GetRecentCompList": [],
        "ClearRecentCompList": [],
        "DeselectAll": [],
        "GetPreviewList": {
            "short_help": "Retrieves a table of global previews",
            "usage": [
                "table :GetPreviewList()"
            ]
        },
        "Delete": [],
        "PasteSettings": [],
        "Cut": [],
        "SetOnlyActiveComp": [],
        "NewFloatFrame": [],
        "NewTabbedFrame": [],
        "NewImageView": [],
        "IsNetworkAllowed": [],
        "AllowNetwork": [],
        "CreateFloatingView": [],
        "SetBatch": [],
        "ClearFileLog": [],
        "ShowWindow": {
            "short_help": "Show or Hide main window",
            "description": "Arguments:\n  mode: Can be a combination of the below:\n    SW_SHOW       - activates and displays the window\n    SW_HIDE       - hides the window completely\n    SW_MAXIMIZE   - maximize the window\n    SW_MINIMIZE   - minimize the window\n    SW_RESTORE    - restores the window to normal size/position",
            "usage": [
                " :ShowWindow(number mode)"
            ]
        },
        "Paste": [],
        "SetClipboard": {
            "short_help": "Sets the clipboard to contain the tool(s) specifed by a table or as ASCII text.",
            "see_also": "[GetClipboard()](#GetClipboard)",
            "usage": [
                "boolean, table :SetClipboard()",
                "boolean, string :SetClipboard()"
            ]
        },
        "GetClipboard": {
            "short_help": "Retrieves the tool(s) on the clipboard, as tables and as ASCII text.",
            "see_also": "[SetClipboard()](#SetClipboard)",
            "usage": [
                "table, string :GetClipboard()"
            ]
        },
        "GetPrefs": {
            "short_help": "Retrieve a table of preferences",
            "see_also": "[SetPrefs()](#SetPrefs), [ShowPrefs()](#ShowPrefs)",
            "usage": [
                "table :GetPrefs([string prefname], [boolean exclude-defaults])"
            ]
        },
        "CreateMail": {
            "short_help": "Create an empty Mail message object",
            "see_also": "[MailMessage()](#MailMessage)",
            "usage": [
                "MailMessage :CreateMail()"
            ]
        },
        "GetRegList": {
            "short_help": "Retrieve a list of all registry objects known to the system",
            "usage": [
                "table :GetRegList(number typemask)"
            ]
        },
        "OpenFile": {
            "short_help": "Open a file",
            "description": "Arguments:\n\n  filename: specifies the full path and name of the file to open\n\n  mode: Specifies the mode(s) of file access required, from a combination of the following constants:\n    FILE_MODE_READ        - Read access\n    FILE_MODE_WRITE       - Write access\n    FILE_MODE_UNBUFFERED  - Unbuffered access\n    FILE_MODE_SHARED      - Shared access",
            "see_also": "[File()](#File)",
            "usage": [
                "File :OpenFile(string filename, number mode)"
            ]
        },
        "GetEnv": {
            "short_help": "Retrieve the value of an environment variable",
            "usage": [
                "string :GetEnv(string name)"
            ]
        },
        "SavePrefs": {
            "short_help": "Saves all current global preferences",
            "description": "filename: pathname to write the prefs file to",
            "see_also": "[SetPrefs()](#SetPrefs), [LoadPrefs()](#LoadPrefs)",
            "usage": [
                " :SavePrefs([string filename])"
            ]
        },
        "LoadPrefs": {
            "short_help": "Reloads all current global preferences",
            "description": "filename:    pathname to read the prefs file from\nmasterprefs: pathname of overriding prefs file",
            "see_also": "[SetPrefs()](#SetPrefs), [SavePrefs()](#SavePrefs)",
            "usage": [
                "boolean :LoadPrefs([string filename], [string mastername])"
            ]
        },
        "FindReg": {
            "short_help": "Find a registry object by ID",
            "see_also": "[GetRegAttrs()](#GetRegAttrs)",
            "usage": [
                "Registry :FindReg(string id, [number type])"
            ]
        },
        "GetRegAttrs": {
            "short_help": "Retrieve information about a registry ID",
            "see_also": "[FindReg()](#FindReg)",
            "usage": [
                "table :GetRegAttrs(string id, [number type])"
            ]
        },
        "GetCompList": {
            "short_help": "Retrieves a table of all compositions currently present",
            "usage": [
                "table :GetCompList()"
            ]
        },
        "ShowAbout": {
            "short_help": "Display the About dialog",
            "usage": [
                " :ShowAbout()"
            ]
        },
        "QueueComp": {
            "short_help": "Queue a composition to be rendered locally",
            "description": "Arguments:\n   Filename - string containing the path to the composition or script to be queued\n   Start    - (optional) first frame to render\n   End      - (optional) last frame to render\n   Group    - (optional) string containing the Slave group to render with\n\nReturns: The new RenderJob object, if successful, else nil",
            "see_also": "[Render()](Composition.md#Render)",
            "usage": [
                "RenderJob :QueueComp(string filename, [number start], [number end], [string group])",
                "RenderJob :QueueComp(table args)"
            ]
        },
        "LoadRecentComp": {
            "short_help": "Loads an composition from the recent file list",
            "see_also": "[NewComp()](#NewComp), [LoadComp()](#LoadComp), [Close()](Composition.md#Close)",
            "usage": [
                "Composition :LoadRecentComp(integer index, [boolean quiet], [boolean autoclose], [boolean hidden])"
            ]
        },
        "LoadComp": {
            "short_help": "Loads an existing composition",
            "see_also": "[NewComp()](#NewComp), [Close()](Composition.md#Close)",
            "usage": [
                "Composition :LoadComp(string filename, [boolean quiet], [boolean autoclose], [boolean hidden])",
                "Composition :LoadComp(string filename, table options)",
                "Composition :LoadComp(MemBlock savedcomp, table options)"
            ]
        },
        "NewComp": {
            "short_help": "Creates a new composition",
            "see_also": "[LoadComp()](#LoadComp), [Close()](Composition.md#Close)",
            "usage": [
                "Composition :NewComp([boolean quiet], [boolean autoclose], [boolean hidden])"
            ]
        },
        "_NewComp": {
            "short_help": "Creates a new composition",
            "see_also": "[LoadComp()](#LoadComp), [Close()](Composition.md#Close)",
            "usage": [
                "Composition :_NewComp([boolean quiet], [boolean autoclose], [boolean hidden])"
            ]
        },
        "OpenLibraryStudio": [],
        "OpenLibrary": [],
        "header_text": "Methods",
        "ToggleRenderManager": {
            "short_help": "Shows or hides the Render Manager",
            "usage": [
                " :ToggleRenderManager()"
            ]
        },
        "IsUtilityOpen": {
            "usage": [
                " :IsUtilityOpen(string id)"
            ]
        },
        "ToggleUtility": {
            "short_help": "Shows or hides a Utility plugin",
            "usage": [
                " :ToggleUtility(string id)"
            ]
        },
        "GetMainWindow": [],
        "GetCPULoad": [],
        "GetAppInfo": [],
        "GetMousePos": [],
        "UpdateMenus": [],
        "Test": [],
        "Print": [],
        "ToggleBins": {
            "short_help": "Shows or hides the Bins window",
            "usage": [
                " :ToggleBins()"
            ]
        },
        "GetRegSummary": {
            "short_help": "Retrieve a list of basic info for all registry objects known to the system",
            "usage": [
                "table :GetRegSummary(number typemask, [boolean hidden])"
            ]
        },
        "ShowPrefs": {
            "short_help": "Display the Preferences dialog",
            "usage": [
                " :ShowPrefs([string pageid], [boolean showall], [Composition comp])"
            ]
        },
        "SetPrefs": {
            "short_help": "Set preferences from a table of attributes",
            "see_also": "[GetPrefs()](#GetPrefs), [ShowPrefs()](#ShowPrefs)",
            "usage": [
                " :SetPrefs(string prefname, value val)",
                " :SetPrefs(table prefs)"
            ]
        },
        "SetMasterApp": {
            "usage": [
                " :SetMasterApp()"
            ]
        },
        "SetData": {
            "short_help": "Set custom persistent data",
            "see_also": "[GetData()](#GetData)",
            "usage": [
                " :SetData(string name, (number|string|boolean|table) value)"
            ]
        },
        "SelectAll": [],
        "RunScript": {
            "short_help": "Run a script",
            "usage": [
                " :RunScript(string filename)"
            ]
        },
        "ReverseMapPath": {
            "short_help": "Collapses a path into best-matching path map",
            "description": "Returns the path string relative to nearest applicable mapped path.",
            "see_also": "[MapPath()](#MapPath), [MapPathSegments()](#MapPathSegments), [ReverseMapPath()](Composition.md#ReverseMapPath)",
            "usage": [
                "string :ReverseMapPath(string mapped)"
            ]
        },
        "Quit": {
            "short_help": "Quit Fusion",
            "description": "The Quit() function will cause Fusion to exit, without saving changes.\nIf no exitcode is specified, the Fusion process will return 0.",
            "usage": [
                " :Quit(number exitcode)"
            ]
        },
        "GetData": {
            "short_help": "Get custom persistent data",
            "see_also": "[SetData()](#SetData)",
            "usage": [
                "(number|string|boolean|table) :GetData([string name])"
            ]
        },
        "Sleep": {
            "usage": [
                " :Sleep(number seconds)"
            ]
        },
        "GetArgs": {
            "short_help": "Get command line arguments",
            "usage": [
                "table :GetArgs()"
            ]
        },
        "Execute": [],
        "GetGlobalPathMap": {
            "short_help": "Returns a table of all global path maps",
            "description": "Args:  built_ins - include built-in path maps (default: true)\n       defaults  - include factory default path maps (default: true)\nReturns: Table of path strings, keyed by map name.",
            "usage": [
                "table :GetGlobalPathMap([boolean built_ins], [boolean defaults])"
            ]
        },
        "DumpGLObjects": {
            "short_help": "Dumps OpenGL Objects",
            "usage": [
                "boolean :DumpGLObjects(string filename)"
            ]
        },
        "DeactivateLicense": {
            "short_help": "Deactivate Fusion Studio on this machine",
            "usage": [
                " :DeactivateLicense()"
            ]
        },
        "MapPath": {
            "short_help": "Expands path mappings in a path string",
            "description": "Returns the path string with all mappings expanded. Only the first path of a multipath is returned.",
            "see_also": "[ReverseMapPath()](#ReverseMapPath), [MapPathSegments()](#MapPathSegments), [MapPath()](Composition.md#MapPath)",
            "usage": [
                "string :MapPath(string path)"
            ]
        },
        "Copy": [],
        "GetVersion": [],
        "GetToolList": {
            "usage": [
                " :GetToolList()"
            ]
        }
    },
    "attributes": {
        "REGS_VersionString": {
            "type": "Built: May 20 2023",
            "value": "string"
        },
        "REGI_Version": {
            "type": "0",
            "value": "number (integer)"
        },
        "REGB_Hide": {
            "type": "false",
            "value": "boolean"
        },
        "REGB_SupportsDoD": {
            "type": "false",
            "value": "boolean"
        },
        "REGI_ClassType": {
            "type": "0 = CT_Any",
            "value": "number (integer)"
        },
        "REGI_Priority": {
            "type": "0",
            "value": "number (integer)"
        },
        "REGS_ID": {
            "type": "Fusion",
            "value": "string"
        },
        "REGS_Name": {
            "type": "Fusion",
            "value": "string"
        },
        "REGB_Unpredictable": {
            "type": "false",
            "value": "boolean"
        },
        "REGB_ControlView": {
            "type": "false",
            "value": "boolean"
        }
    }
}