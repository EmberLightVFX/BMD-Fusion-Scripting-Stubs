{
    "name": "GLView",
    "properties": {
        "CurrentViewer": {
            "return_type": "GLViewer",
            "access_class": "Read/Write"
        }
    },
    "class_inheritance": [
        "Object",
        "FuView"
    ],
    "methods": {
        "LoadPrefs": {
            "short_help": "Saves the current view prefs to a named configuration",
            "usage": [
                " :LoadPrefs()",
                " :LoadPrefs(string configname)"
            ]
        },
        "ShowLUTEditor": {
            "short_help": "Pops up the Editor window for the current Monitor LUT",
            "usage": [
                " :ShowLUTEditor()"
            ]
        },
        "IsLUTEnabled": {
            "short_help": "Returns true if the current Monitor LUT is enabled",
            "usage": [
                "boolean :IsLUTEnabled()"
            ]
        },
        "EnableLUT": {
            "short_help": "Enables or disables the current Monitor LUT",
            "usage": [
                " :EnableLUT([boolean enable])"
            ]
        },
        "AddToolAction": [],
        "IsWipeEnabled": [],
        "WipeEnable": [],
        "GetStereoMethod": {
            "short_help": "Returns the method and options being used for stereo display",
            "description": "method can be 'Quad Buffer', 'Anaglyph', 'Crosseyed', 'Interlaced', 'Checkerboard', 'Left Eye Only' or 'Right'\nIf method is 'Anaglyph':\n\toption1 can be 'Red/Cyan', 'Red/Green',\t'Red/Blue', 'Amber/Blue' or 'Green/Magenta'\n\toption2 can be 'Monochrome', 'Half-color',\t'Color', 'Optimised' or 'Dubois'",
            "usage": [
                "string, ,  :GetStereoMethod()"
            ]
        },
        "SetStereoMethod": {
            "short_help": "Sets the method for stereo display",
            "description": "method can be one of the following strings:\n\t'Quad Buffer'\tEnable OpenGL quad-buffered stereo mode\n\t'Anaglyph'\t\tTint and combine views for anaglyph glasses\n\t\toption1 can be 'Red/Cyan', 'Red/Green',\t'Red/Blue', 'Amber/Blue' or 'Green/Magenta'\n\t\toption2 can be 'Monochrome', 'Half-color',\t'Color', 'Optimised' or 'Dubois' (forces 'Red/Cyan')\n\t'Crosseyed'\t\tDisplay views side-by-side for crosseyed viewing\n\t'Interlaced'\t\tDisplay views on alternate scanlines\n\t'Checkerboard'\t\tStereo support for checkerboard DLPs\n\t\toption1 is the value for gamma correction of the polariser screen\n\t'Left Eye Only'\tDisplay left eye view only\n\t'Right Eye Only'\tDisplay right eye view only",
            "usage": [
                " :SetStereoMethod(string method, [ option1], [ option2])"
            ]
        },
        "GetStereoSource": {
            "short_help": "Returns the source being used for stereo display",
            "description": "ABsource is true if the A & B buffers are used for left & right\nstacked is true if the two halves of the image are used\nstackmethod will be 'Horizontal' or 'Vertical'",
            "usage": [
                "boolean, boolean, string :GetStereoSource()"
            ]
        },
        "SetStereoSource": {
            "short_help": "Sets the source for the left & right stereo images",
            "description": "Pass true for ABsource to use the A and B buffers for left & right views.\nPass true for stacked to use the two halves of the image for left & right views.\nstackmethod may be 'Horizontal' or 'Vertical' for side-by-side or over-under images, respectively.",
            "usage": [
                " :SetStereoSource(boolean ABsource, boolean stacked, [string stackmethod])"
            ]
        },
        "IsStereoSwapped": {
            "short_help": "Indicates if the left & right stereo eyes are currently swapped",
            "usage": [
                "boolean :IsStereoSwapped()"
            ]
        },
        "SwapStereo": {
            "short_help": "Swaps left & right stereo eye views",
            "usage": [
                " :SwapStereo()",
                " :SwapStereo([boolean enable])"
            ]
        },
        "IsStereoEnabled": {
            "short_help": "Indicates if stereo display is currently enabled",
            "usage": [
                "boolean :IsStereoEnabled()"
            ]
        },
        "EnableStereo": {
            "short_help": "Enables or disables 3D stereo display",
            "usage": [
                " :EnableStereo([boolean enable])"
            ]
        },
        "GetViewerList": {
            "short_help": "Returns a list of available viewers",
            "usage": [
                "table :GetViewerList()"
            ]
        },
        "GetSplitTable": {
            "short_help": "Get the split position of the view as a table",
            "description": "Returns:\n   x = table[1]\n   y = table[2]\n   angle = table[3]",
            "usage": [
                "table :GetSplitTable()"
            ]
        },
        "GetSplit": {
            "short_help": "Get the split position of the view",
            "usage": [
                "number, number, number :GetSplit()"
            ]
        },
        "SetSplit": {
            "short_help": "Set the split position of the view",
            "usage": [
                " :SetSplit(number x, number y, number angle)"
            ]
        },
        "DisableCurrentTools": {
            "short_help": "Pass-through the currently selected tools",
            "usage": [
                " :DisableCurrentTools()"
            ]
        },
        "SetPos": {
            "short_help": "Set the position of the display",
            "usage": [
                "boolean :SetPos(number x, number y, [number z])"
            ]
        },
        "ShowingSubView": {
            "short_help": "Returns true if the inset SubView is currently being displayed",
            "usage": [
                "boolean :ShowingSubView()"
            ]
        },
        "ShowSubView": {
            "short_help": "Enables the inset SubView display",
            "usage": [
                " :ShowSubView([boolean enable])"
            ]
        },
        "ShowingQuadView": {
            "short_help": "Returns true if the view is split into four",
            "usage": [
                "boolean :ShowingQuadView()"
            ]
        },
        "ShowQuadView": {
            "short_help": "Splits the view into four subviews",
            "usage": [
                " :ShowQuadView([boolean enable])"
            ]
        },
        "GetLocked": {
            "short_help": "Returns true if the display is locked",
            "usage": [
                "boolean :GetLocked()"
            ]
        },
        "SetLocked": {
            "short_help": "Lock or unlock the display",
            "usage": [
                " :SetLocked([boolean enable])"
            ]
        },
        "GetRotTable": {
            "short_help": "Returns the x,y,z rotation of the display in degrees as a table",
            "description": "Returns:\n       x = table[1]\n       y = table[2]\n       z = table[3]",
            "usage": [
                "table :GetRotTable()"
            ]
        },
        "GetRot": {
            "short_help": "Returns the x,y,z rotation of the display in degrees",
            "usage": [
                "number, number, number :GetRot()"
            ]
        },
        "SetRot": {
            "short_help": "Set the x,y,z rotation of the display in degrees",
            "usage": [
                " :SetRot(number x, number y, number z)"
            ]
        },
        "ResetView": {
            "short_help": "Resets the display to default position etc",
            "usage": [
                " :ResetView()"
            ]
        },
        "GetScaleFit": {
            "short_help": "Indicates if the display is set to scale-to-fit",
            "usage": [
                "boolean :GetScaleFit()"
            ]
        },
        "GetPreview": {
            "short_help": "Returns the buffer's Preview",
            "description": "where 'buffer' is one of the following numbers:\n   0 = A\n   1 = B\n   2 = A|B split\nIf 'buffer' is not specified, the current Preview is returned.",
            "usage": [
                " :GetPreview([number buffer])"
            ]
        },
        "GetBuffer": {
            "short_help": "Returns which buffer is shown",
            "description": "where 'buffer' is one of the following numbers:\n   0 = A\n   1 = B\n   2 = A|B split",
            "usage": [
                "number :GetBuffer()"
            ]
        },
        "SetBuffer": {
            "short_help": "Show a particular buffer",
            "description": "where 'buffer' is one of the following numbers:\n   0 = A\n   1 = B\n   2 = A|B split",
            "usage": [
                " :SetBuffer(number buffer, [boolean toggle])"
            ]
        },
        "DisableSelectedTools": {
            "short_help": "Pass-through the selected tools",
            "usage": [
                " :DisableSelectedTools()"
            ]
        },
        "SwapSubView": {
            "short_help": "Swaps the SubView with the Main View",
            "usage": [
                "boolean :SwapSubView()"
            ]
        },
        "GetPosTable": {
            "short_help": "Returns the position of the display as a table",
            "description": "Returns:\n       x = table[1]\n       y = table[2]\n       z = table[3]",
            "usage": [
                "table :GetPosTable()"
            ]
        },
        "GetPrefs": {
            "short_help": "Retrieve a table of preferences for this view",
            "description": "Returns a table of Preference attributes",
            "see_also": "[ShowPrefs()](Fusion.md#ShowPrefs), [SetPrefs()](Fusion.md#SetPrefs)",
            "usage": [
                "table :GetPrefs()"
            ]
        },
        "GetPos": {
            "short_help": "Returns the position of the display",
            "usage": [
                "number, number, number :GetPos()"
            ]
        },
        "LoadLUTFile": {
            "short_help": "Loads a LUT file, setting or LUT plugin ID into the Monitor LUT",
            "usage": [
                "boolean :LoadLUTFile(string pathname)"
            ]
        },
        "SetScale": {
            "short_help": "Set the scale of the display",
            "usage": [
                " :SetScale(number scale)"
            ]
        },
        "GetScale": {
            "short_help": "Returns the scale of the display",
            "usage": [
                "number :GetScale()"
            ]
        },
        "SavePrefs": {
            "short_help": "Saves the current view prefs to a named configuration",
            "usage": [
                " :SavePrefs()",
                " :SavePrefs(string configname)"
            ]
        }
    },
    "attributes": {
        "REGS_VersionString": {
            "type": "Built: May 20 2023",
            "value": "string"
        },
        "REGI_Version": {
            "type": "0",
            "value": "number (integer)"
        },
        "REGB_Hide": {
            "type": "false",
            "value": "boolean"
        },
        "REGB_SupportsDoD": {
            "type": "false",
            "value": "boolean"
        },
        "REGI_ClassType": {
            "type": "1638400 = CT_View",
            "value": "number (integer)"
        },
        "REGI_Priority": {
            "type": "4294967196",
            "value": "number (integer)"
        },
        "REGS_ID": {
            "type": "GLView",
            "value": "string"
        },
        "REGS_Name": {
            "type": "GLView",
            "value": "string"
        },
        "REGB_Unpredictable": {
            "type": "false",
            "value": "boolean"
        },
        "REGB_ControlView": {
            "type": "false",
            "value": "boolean"
        }
    }
}