{"attributes":{"REGS_VersionString":{"type":"Built: May 20 2023","value":"string"},"REGI_Version":{"type":"0","value":"number (integer)"},"REGB_Hide":{"type":"false","value":"boolean"},"REGB_SupportsDoD":{"type":"false","value":"boolean"},"REGI_ClassType":{"type":"0 = CT_Any","value":"number (integer)"},"REGI_Priority":{"type":"0","value":"number (integer)"},"REGS_ID":{"type":"QueueManager","value":"string"},"REGS_Name":{"type":"QueueManager","value":"string"},"REGB_Unpredictable":{"type":"false","value":"boolean"},"REGB_ControlView":{"type":"false","value":"boolean"}},"name":"QueueManager","methods":{"header_text":"Methods","Stop":[],"Start":[],"RemoveJob":{"short_help":"Removes a job from the list","usage":[" :RemoveJob(RenderJob job)"]},"NetJoinRender":[],"UpdateItem":[],"DeleteItem":[],"AddItem":[],"GetRootData":[],"GetSchemaList":[],"GetItemList":[],"GetRenderNodeFromID":[],"GetJobFromID":[],"SaveRenderNodeList":{"short_help":"Saves the current list of RenderNodes","description":"Arguments:\n   filename - The file to save to (defaults to Queues:Slaves.slv)","usage":["boolean :SaveRenderNodeList([string filename])"]},"LoadRenderNodeList":{"short_help":"Loads a list of RenderNodes to use","description":"Arguments:\n   filename - The file to load from (defaults to Queues:Slaves.slv)","usage":["boolean :LoadRenderNodeList([string filename])"]},"GetJobs":[],"GetRenderNodes":[],"RemoveWatch":[],"AddWatch":[],"GetID":[],"ScanForRenderNodes":{"short_help":"Scans local network for new RenderNodes","usage":[" :ScanForRenderNodes()"]},"AddRenderNode":{"short_help":"Adds a RenderNode to the node list","description":"Arguments:\n   Name   - the node's hostname or IP address\n   Groups - (optional) the render groups to join (default \"all\")\n   Unused - (optional) node will be added, but not used","usage":["RenderNode :AddRenderNode(string name, [string groups], [boolean unused])"]},"RemoveRenderNode":{"short_help":"Removes a RenderNode from the node list","description":"Arguments:\n   node  - the node object, or its hostname or IP address","usage":[" :RemoveRenderNode(RenderNode node)"," :RemoveRenderNode(string node)"]},"Log":{"short_help":"Writes a message to the Render Log","usage":[" :Log(string message)"]},"MoveJob":{"short_help":"Moves a job up or down the list","description":"Arguments:\n    job    - the RenderJob to move\n    offset - how far up or down the job list to move it\n             (negative offsets move the job up)","usage":[" :MoveJob(RenderJob job, number offset)"]},"AddJob":{"short_help":"Adds a job to the list","description":"Arguments:\n\tFilename\tFilename of comp or script to be queued\n\tGroups\t\tRenderNode groups to assign the job to\n\tFrameRange\tRange of frames to render\n\tEndScript\tScript file to execute on completion\n\tArgs\t\tTable of named options, including:\n\t\t\tFilename, Groups, FrameRange, EndScript\n\t\t\tStart, End, QueuedBy, RenderStep, TimeOut","usage":["RenderJob :AddJob(string filename, [string groups], [string frames], [string endscript])","RenderJob :AddJob(table args)"]},"SaveQueue":{"short_help":"Saves the current list of jobs","usage":["boolean :SaveQueue(string filename)"]},"LoadQueue":{"short_help":"Loads a list of jobs to do","usage":["boolean :LoadQueue(string filename)"]},"GetGroupList":{"short_help":"Get a list of all node groups","usage":["table :GetGroupList()"]},"GetJobList":{"short_help":"Get the list of jobs to render","usage":["table :GetJobList()"]},"GetRenderNodeList":{"short_help":"Get the list of available RenderNodes","usage":["table :GetRenderNodeList()"]}},"class_inheritance":["Object","LockableObject"]}