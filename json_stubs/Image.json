{"methods":{"IsInt64":{"usage":["boolean :IsInt64()"]},"IsMask":{"usage":["boolean :IsMask()"]},"IsRGBAFlt128":{"usage":["boolean :IsRGBAFlt128()"]},"Saturate":{"usage":[" :Saturate(float64 rs, float64 gs, float64 bs)"]},"IsRGBAFlt64":{"usage":["boolean :IsRGBAFlt64()"]},"IsRGBAInt32":{"usage":["boolean :IsRGBAInt32()"]},"IsRGBAInt64":{"usage":["boolean :IsRGBAInt64()"]},"IsReadOnly":{"usage":["boolean :IsReadOnly()"]},"IsReadOnlyAux":{"usage":["boolean :IsReadOnlyAux()"]},"IsSimple":{"usage":["boolean :IsSimple()"]},"SetPixelFlt":{"usage":[" :SetPixelFlt(int x, int y, FltPixel pix)"]},"LegalOf":{"usage":["Image :LegalOf(int32 vidmode, int32 method, float32 amplitude, float32 softclip)"]},"SetPixelInt":{"usage":[" :SetPixelInt(int x, int y, IntPixel pix)"]},"Crop":{"usage":["Image :Crop(Image dest, TagList tags)"]},"UseSAT":{"usage":["boolean :UseSAT()"]},"MakeLookUpTableOf":{"usage":["Image :MakeLookUpTableOf()"]},"info_text":"Discovered methods might be available in many contexts, but most typically in Fuse scripts","_ApplyMatrixCMF":{"usage":["Image :_ApplyMatrixCMF(Image dest, ColorMatrixFull cm, TagList tags)"]},"OMerge":{"usage":[" :OMerge(Image img, float64 x, float64 y)"]},"_ApplyMatrixOfCM":{"usage":["Image :_ApplyMatrixOfCM(ColorMatrix cm, TagList tags)"]},"OXMerge":{"usage":[" :OXMerge(Image img, float64 x, float64 y)"]},"_ApplyMatrixOfCMF":{"usage":["Image :_ApplyMatrixOfCMF(ColorMatrixFull cm, TagList tags)"]},"RecycleSAT":{"usage":[" :RecycleSAT()"]},"MergeOf":{"usage":["Image :MergeOf(Image fg, TagList tags)"]},"ReverseFieldDominance":{"usage":[" :ReverseFieldDominance(boolean shiftup)"]},"Merge":{"usage":[" :Merge(Image fg, TagList tags)"]},"SampleAreaBFlt":{"usage":[" :SampleAreaBFlt(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3, float64 x4, float64 y4, FltPixel p)"]},"AlphaMultiply":{"usage":[" :AlphaMultiply(Image dest)"]},"ApplyLookUpTable":{"usage":[" :ApplyLookUpTable(LookUpTable lutr, LookUpTable lutg, LookUpTable lutb, LookUpTable luta)"]},"Clear":{"usage":[" :Clear()"]},"_FromMemory":{"usage":[" :_FromMemory(void _ptr, string fmt, boolean topdown)"]},"ApplyLookUpTable3D":{"usage":[" :ApplyLookUpTable3D(LookUpTable3D lutr, LookUpTable3D lutg, LookUpTable3D lutb)"]},"SampleAreaBInt":{"usage":[" :SampleAreaBInt(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3, float64 x4, float64 y4, IntPixel p)"]},"SampleAreaDFlt":{"usage":[" :SampleAreaDFlt(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3, float64 x4, float64 y4, FltPixel p)"]},"CSConvert":{"usage":[" :CSConvert(string fromstr, string tostr)"]},"SampleAreaDInt":{"usage":[" :SampleAreaDInt(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3, float64 x4, float64 y4, IntPixel p)"]},"SampleAreaMFlt":{"usage":[" :SampleAreaMFlt(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3, float64 x4, float64 y4, FltPixel p)"]},"CheckAbort":{"usage":["boolean :CheckAbort()"]},"SampleAreaMInt":{"usage":[" :SampleAreaMInt(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3, float64 x4, float64 y4, IntPixel p)"]},"CopyField":{"usage":["Image :CopyField(int32 fromfield, Image dest, int32 tofield, int32 interp)"]},"SampleAreaWInt":{"usage":[" :SampleAreaWInt(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3, float64 x4, float64 y4, IntPixel p)"]},"Transform":{"usage":["Image :Transform(Image dest, TagList tags)"]},"SamplePixelBFlt":{"usage":[" :SamplePixelBFlt(float64 x, float64 y, FltPixel p)"]},"CopyOf":{"usage":["Image :CopyOf(TagList tags)"]},"SamplePixelBInt":{"usage":[" :SamplePixelBInt(float64 x, float64 y, IntPixel p)"]},"DownloadGPUMem":{"usage":["boolean :DownloadGPUMem(Request req)"]},"SamplePixelDInt":{"usage":[" :SamplePixelDInt(float64 x, float64 y, IntPixel p)"]},"FillFlt":{"usage":[" :FillFlt(FltPixel p, TagList tags)"]},"SamplePixelMFlt":{"usage":[" :SamplePixelMFlt(float64 x, float64 y, FltPixel p)"]},"FillInt":{"usage":[" :FillInt(IntPixel p, TagList tags)"]},"Gain":{"usage":[" :Gain(float64 rg, float64 gg, float64 bg, float64 ag)"]},"SamplePixelWInt":{"usage":[" :SamplePixelWInt(float64 x, float64 y, IntPixel p)"]},"header_text":"Discovered Methods","GainOf":{"usage":["Image :GainOf(float32 r, float32 g, float32 b, float32 a, TagList tags)"]},"Gamma":{"usage":[" :Gamma(float64 rg, float64 gg, float64 bg, float64 ag)"]},"GetCanvasColorFlt":{"usage":[" :GetCanvasColorFlt(FltPixel p)"]},"GetCanvasColorInt":{"usage":[" :GetCanvasColorInt(IntPixel p)"]},"_new_TagList":{"usage":["Image :_new_TagList(TagList tags)"]},"GetChanLUTs":{"usage":["ChanLUTs :GetChanLUTs()"]},"_new_MemBlock":{"usage":["Image :_new_MemBlock(MemBlock mb)"]},"GetChanOffset":{"usage":["int32 :GetChanOffset()"]},"_GetChanSizeStr":{"usage":["int32 :_GetChanSizeStr(string chanstr)"]},"GetChanType":{"usage":["int32 :GetChanType()"]},"ErodeDilate":{"usage":["Image :ErodeDilate(Image dest, TagList tags)"]},"GetPixelFlt":{"usage":[" :GetPixelFlt(int x, int y, FltPixel pix)"]},"_GetChanSizeNum":{"usage":["int32 :_GetChanSizeNum(int32 chan)"]},"_FromHexString":{"usage":[" :_FromHexString(string str)"]},"GetPixelInt":{"usage":[" :GetPixelInt(int x, int y, IntPixel pix)"]},"_ChannelOpOf":{"usage":["Image :_ChannelOpOf(string op, Image img, char funcs, float32 data, float32 a1, float32 a2)"]},"GetScanLine":{"usage":["uint8 :GetScanLine()"]},"_BlendOf":{"usage":["Image :_BlendOf(Image fg, Image map, float64 blend)"]},"GetScanLineAux":{"usage":["uint8 :GetScanLineAux()"]},"_ApplyMatrixCM":{"usage":["Image :_ApplyMatrixCM(Image dest, ColorMatrix cm, TagList tags)"]},"HasChannel":{"usage":["boolean :HasChannel(int chan)"]},"SetGPUMemDirtyFlag":{"usage":[" :SetGPUMemDirtyFlag(boolean dirty)"]},"SetCanvasColorInt":{"usage":[" :SetCanvasColorInt(IntPixel p)"]},"IsAFlt16":{"usage":["boolean :IsAFlt16()"]},"SetCanvasColorFlt":{"usage":[" :SetCanvasColorFlt(FltPixel p)"]},"IsAFlt32":{"usage":["boolean :IsAFlt32()"]},"SamplePixelWFlt":{"usage":[" :SamplePixelWFlt(float64 x, float64 y, FltPixel p)"]},"IsAInt16":{"usage":["boolean :IsAInt16()"]},"SamplePixelMInt":{"usage":[" :SamplePixelMInt(float64 x, float64 y, IntPixel p)"]},"IsAInt8":{"usage":["boolean :IsAInt8()"]},"Resize":{"usage":["Image :Resize(Image dest, TagList tags)"]},"IsDeep":{"usage":["boolean :IsDeep()"]},"SamplePixelDFlt":{"usage":[" :SamplePixelDFlt(float64 x, float64 y, FltPixel p)"]},"IsFloat":{"usage":["boolean :IsFloat()"]},"SampleAreaWFlt":{"usage":[" :SampleAreaWFlt(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3, float64 x4, float64 y4, FltPixel p)"]},"IsFloat128":{"usage":["boolean :IsFloat128()"]},"AllocScanLineData":{"usage":["boolean :AllocScanLineData()"]},"OpenClose":{"usage":["Image :OpenClose(Image dest, TagList tags)"]},"Blur":{"usage":["Image :Blur(Image dest, TagList tags)"]},"IsGPUMemDirty":{"usage":["boolean :IsGPUMemDirty()"]},"IsFloat64":{"usage":["boolean :IsFloat64()"]},"IsInt":{"usage":["boolean :IsInt()"]},"AlphaDivide":{"usage":[" :AlphaDivide(Image dest)"]},"IsInt32":{"usage":["boolean :IsInt32()"]}},"attributes":{"REGB_Hide":{"type":"false","value":"boolean"},"REGB_SupportsDoD":{"type":"false","value":"boolean"},"REGS_Name":{"type":"Image","value":"string"},"REGI_Version":{"type":"0","value":"number (integer)"},"REGS_VersionString":{"type":"Built: Jul 19 2023","value":"string"},"REGI_ClassType":{"type":"1507328 = CT_Parameter","value":"number (integer)"},"REGI_Priority":{"type":"0","value":"number (integer)"},"REGB_ControlView":{"type":"false","value":"boolean"},"REGS_ID":{"type":"Image","value":"string"},"REGB_Utility_Toggle":{"type":"false","value":"boolean"},"REGB_Unpredictable":{"type":"false","value":"boolean"}},"name":"Image","properties":{"OriginalXScale":{"return_type":"number","short_help":"Unproxied pixel X Aspect","access_class":"Read Only"},"OriginalYScale":{"return_type":"number","short_help":"Unproxied pixel Y Aspect","access_class":"Read Only"},"PixelSize":{"return_type":"int32","access_class":"Read/Write"},"ProxyScale":{"return_type":"number","short_help":"Image proxy scale multiplier","description":"ProxyScale may be any positive integer, where 1 indicates no proxy.","access_class":"Read Only"},"ValidWindow":{"return_type":"ImgRectI","access_class":"Read Only"},"Width":{"return_type":"number","short_help":"Actual image width, in pixels","access_class":"Read Only"},"XOffset":{"return_type":"number","short_help":"Image X Offset","access_class":"Read Only"},"XScale":{"return_type":"number","short_help":"Pixel X Aspect","access_class":"Read Only"},"header_text":"Discovered Properties","YOffset":{"return_type":"number","short_help":"Image X Offset","access_class":"Read Only"},"DataWindow":{"return_type":"table","short_help":"Rectangle of valid data pixels, in a table","description":"Data rectangle coordinates are stored as four entries in a table, in the format\n\t{ <left>, <bottom>, <right>, <top> }","access_class":"Read Only"},"YScale":{"return_type":"number","short_help":"Pixel Y Aspect","access_class":"Read Only"},"Depth":{"return_type":"number","short_help":"Image depth indicator (not in bits)","description":"Depth will be one of the following values:\n\n\t1 - alpha only  8 bit integer\n\t2 - alpha only 16 bit integer\n\t3 - alpha only 16 bit float\n\t4 - alpha only 32 bit float\n\t5 - RGBA        8 bit integer\n\t6 - RGBA       16 bit integer\n\t7 - RGBA       16 bit float\n\t8 - RGBA       32 bit float","access_class":"Read Only"},"Field":{"return_type":"number","short_help":"Field indicator","description":"Field will be one of the following values:\n\n\t-1 - Full Frames, no fields\n\t 0 - Odd (NTSC) field\n\t 1 - Even (PAL/HD) field","access_class":"Read Only"},"Height":{"return_type":"number","short_help":"Actual image height, in pixels","access_class":"Read Only"},"info_text":"Discovered properties might be available in many contexts, but most typically in Fuse scripts","ImageWindow":{"return_type":"ImgRectI","access_class":"Read Only"},"OriginalHeight":{"return_type":"number","short_help":"Unproxied image height, in pixels","access_class":"Read Only"},"OriginalWidth":{"return_type":"number","short_help":"Unproxied image width, in pixels","access_class":"Read Only"}},"class_inheritance":["Object","Parameter"]}