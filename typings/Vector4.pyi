from Vector4f import _Vector4f
from Vector3f import _Vector3f
from Matrix4 import _Matrix4


class _Vector4:

	#---Properties---#
	TypeName: str
	"""
	Read Only
	"""
	TypeNamePtr: str
	"""
	Read Only
	"""

	#---Methods---#
	def __div(self, v: float) -> _Vector4:
		...
	def __unm(self) -> _Vector4:
		...
	def _newVec4(self, vec: _Vector4) -> _Vector4:
		...
	def _newVec4f(self, vec: _Vector4f) -> _Vector4:
		...
	def _newVec3f(self, vec: _Vector3f) -> _Vector4:
		...
	def header_text(self):
		...
	def _LerpVec4(self, vec: _Vector4, t: _Vector4) -> _Vector4:
		...
	def _LerpNum(self, vec: _Vector4, t: float) -> _Vector4:
		...
	def info_text(self):
		...
	def _newNums(self, x: float, y: float, z: float, w: float) -> _Vector4:
		...
	def _mulMat4(self, mat: _Matrix4) -> _Vector4:
		...
	def Scale(self, x: float, y: float, z: float, w: float) -> _Vector4:
		...
	def Set(self, x: float, y: float, z: float, w: float) -> None:
		...
	def _mulNum(self, v: float) -> _Vector4:
		...
	def Length(self) -> float:
		...
	def __eq(self, vec: _Vector4) -> bool:
		...
	def Normalize(self) -> None:
		...
	def Dot4(self, vec: _Vector4) -> _Vector4:
		...
	def Distance(self, vec: _Vector4) -> float:
		...
	def Dot3(self, vec: _Vector4) -> _Vector4:
		...
	def Cross(self, vec: _Vector4) -> _Vector4:
		...
	def __add(self, vec: _Vector4) -> _Vector4:
		...
	def __sub(self, vec: _Vector4) -> _Vector4:
		...

Vector4 = _Vector4