from typing import Literal

class _ImgRectI:

	#---Properties---#
	TypeName: str
	"""
	Read Only
	"""
	TypeNamePtr: str
	"""
	Read Only
	"""

	#---Methods---#
	def FlipX(self) -> _ImgRectI:
		...
	def _newCopy(self, x: _ImgRectI) -> _ImgRectI:
		...
	def FlipY(self) -> _ImgRectI:
		...
	def Inflate(self, x: float, y: float) -> _ImgRectI:
		...
	def IsEmpty(self) -> bool:
		...
	def Height(self) -> int:
		...
	def header_text(self):
		...
	def _newDef(self) -> _ImgRectI:
		...
	def info_text(self):
		...
	def __tostring(self) -> str:
		...
	def _newNums(self, l: int, b: int, r: int, t: int) -> _ImgRectI:
		...
	def Scale(self, x: float, y: float) -> _ImgRectI:
		...
	def _IntersectNums(self, l: int, b: int, r: int, t: int) -> _ImgRectI:
		...
	def Offset(self, x: float, y: float) -> _ImgRectI:
		...
	def _IsWithinNums(self, x: int, y: int) -> bool:
		...
	def IsNull(self) -> bool:
		...
	def _IsWithinRect(self, rect: _ImgRectI) -> bool:
		...
	def Normalise(self) -> _ImgRectI:
		...
	def _SetNums(self, l: int, b: int, r: int, t: int) -> None:
		...
	def Width(self) -> int:
		...
	def _UnionNums(self, l: int, b: int, r: int, t: int) -> _ImgRectI:
		...
	def _IntersectRect(self, rect: _ImgRectI) -> _ImgRectI:
		...
	def _UnionRect(self, rect: _ImgRectI) -> _ImgRectI:
		...

ImgRectI = _ImgRectI