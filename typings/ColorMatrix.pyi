from ColorMatrix import _ColorMatrix
from ColorMatrixFull import _ColorMatrixFull


class _ColorMatrix:

	#---Properties---#
	TypeNamePtr: str
	"""
	Read Only
	"""
	def_BWeight: float
	"""
	Read Only
	"""
	def_GWeight: float
	"""
	Read Only
	"""
	TypeName: str
	"""
	Read Only
	"""
	def_RWeight: float
	"""
	Read Only
	"""

	#---Methods---#
	def __eq(self, cm: _ColorMatrix) -> bool:
		...
	def _newCMF(self, cm: _ColorMatrixFull) -> _ColorMatrix:
		...
	def __add(self, cm: _ColorMatrix) -> _ColorMatrix:
		...
	def header_text(self):
		...
	def Identity(self) -> None:
		...
	def Blend(self, cm: _ColorMatrix, blend: float) -> None:
		...
	def Adjoint(self) -> None:
		...
	def Determinant(self) -> float:
		...
	def RotateWeighted(self, r: float, g: float, b: float, angle: float, rweight: float, gweight: float, bweight: float) -> None:
		...
	def Shear(self, g: float, r: float) -> None:
		...
	def info_text(self):
		...
	def Tint(self, angle: float, length: float, rweight: float, gweight: float, bweight: float) -> None:
		...
	def Rotate(self, r: float, g: float, b: float, angle: float) -> None:
		...
	def Tint_HighLuma(self, angle: float, len: float) -> None:
		...
	def Tint_HighLumaBetter(self, angle: float, len: float) -> None:
		...
	def Tint_LowLuma(self, angle: float, len: float) -> None:
		...
	def Tint_LowLumaBetter(self, angle: float, len: float) -> None:
		...
	def _RotB1(self, angle: float) -> None:
		...
	def _RotB2(self, s: float, c: float) -> None:
		...
	def _RotG1(self, angle: float) -> None:
		...
	def IsIdentity(self) -> bool:
		...
	def _RotG2(self, s: float, c: float) -> None:
		...
	def Offset(self, r: float, g: float, b: float) -> None:
		...
	def _RotR1(self, angle: float) -> None:
		...
	def _RotR2(self, s: float, c: float) -> None:
		...
	def _Scale3(self, r: float, g: float, b: float) -> None:
		...
	def _newDef(self) -> _ColorMatrix:
		...
	def _Scale4(self, r: float, g: float, b: float, scale: float) -> None:
		...
	def _newCM(self, cm: _ColorMatrix) -> _ColorMatrix:
		...
	def _mulNum(self, num: float) -> _ColorMatrix:
		...
	def GrayScale(self, rweight: float, gweight: float, bweight: float) -> None:
		...
	def RGBtoYUV(self) -> None:
		...
	def _mulCM(self, cm: _ColorMatrix) -> _ColorMatrix:
		...
	def Inverse(self) -> _ColorMatrixFull:
		...
	def Hue(self, hue: float, rweight: float, gweight: float, bweight: float) -> None:
		...
	def YUVtoRGB(self) -> None:
		...
	def Saturate(self, sat: float, rweight: float, gweight: float, bweight: float) -> None:
		...

ColorMatrix = _ColorMatrix